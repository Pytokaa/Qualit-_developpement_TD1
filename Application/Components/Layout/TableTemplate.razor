@using System.Reflection
@using Application.Attributes
@typeparam TItem where TItem : class, Application.Models.IEntity

<h3>@Title</h3>

@if (Items == null)
{
    <p>Loading...</p>
}
else if (!Items.Any())
{
    <p>Pas de donn√©es</p>
}
else
{
    <div id="content">
        <div id="divSelect">
            <select @onchange="OnSelectChanged" value="@selectedItem?.GetName()">
                @foreach (var entity in Items)
                {
                    <option value="@entity.GetName()">@entity.GetName()</option>
                }
            </select>
        </div>
        <div id="divForm">
            @if (selectedItem != null)
            {
                <EditForm Model="selectedItem" OnValidSubmit="SubmitForm">
                    @foreach (var prop in typeof(TItem).GetProperties()
                                  .Where(p => !Attribute.IsDefined(p, typeof(IgnoreInTemplateAttribute))))
                    {
                        <div class="form-group">
                            <label>@prop.Name</label>
                            
                            @if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?))
                            {
                                <input type="number"
                                       value="@prop.GetValue(selectedItem)"
                                       @onchange="e => prop.SetValue(selectedItem, Convert.ToInt32(e.Value))" />
                            }
                            else
                            {
                                <input type="text"
                                       value="@prop.GetValue(selectedItem)"
                                       @onchange="e => prop.SetValue(selectedItem, e.Value?.ToString())" />
                            }
                        </div>
                    }
                    <button type="submit">Update</button>
                </EditForm>
                <div id="deleteItemdiv" @onclick="DeleteSubmit">
                    Delete
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<TItem>? Items { get; set; }
    [Parameter] public TItem? selectedItem { get; set; }
    [Parameter] public EventCallback<string> OnItemSelected { get; set; }
    [Parameter] public EventCallback<TItem> OnPutFormSubmit { get; set; }
    [Parameter] public EventCallback<TItem> OnDeleteButtonSubmit { get; set; }

    private async Task OnSelectChanged(ChangeEventArgs e)
    {
        var selectedName = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedName))
        {
            await OnItemSelected.InvokeAsync(selectedName);
        }
    }

    private async Task SubmitForm()
    {
        if (selectedItem != null)
            await OnPutFormSubmit.InvokeAsync(selectedItem);
    }

    private async Task DeleteSubmit()
    {
        if (selectedItem != null)
        {
            await OnDeleteButtonSubmit.InvokeAsync(selectedItem);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && selectedItem != null)
        {
            await OnItemSelected.InvokeAsync(selectedItem.GetName());
        }
    }
}
