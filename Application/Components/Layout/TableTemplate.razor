@using System.Reflection
@using Application.Attributes
@using Application.Models.StateService
@using Application.Services
@using Application.ViewModel
@inject NavigationManager NavManager
@typeparam TItem where TItem : class, Application.Models.IEntity, new()
<link href="css/tableTemplate.css" rel="stylesheet" />






<h3>@Title</h3>

@if (_ViewModel.IsLoading)
{
    <p>Loading...</p>
}

else
{
    <div id="content">
        <div id="divSelect">
            <select @onchange="e => _ViewModel.OnSelectorChange(_ViewModel.Items.FirstOrDefault(i => i.GetName() == e.Value?.ToString()))" value="@_ViewModel.CurrentEntity?.GetName()" id="ItemSelector">
                @foreach (var entity in _ViewModel.Items)
                {
                    <option value="@entity.GetName()">@entity.GetName()</option>
                }
            </select>
        </div>
        <div id="divForm">
            <h4>Update @Title : </h4>
            @if (_ViewModel.CurrentEntity != null)
            {
                <EditForm Model="@_ViewModel.CurrentEntity" OnValidSubmit="@_ViewModel.SubmitUpdateAsync">
                    @foreach (var prop in typeof(TItem).GetProperties()
                                  .Where(p => !Attribute.IsDefined(p, typeof(IgnoreInTemplateAttribute))))
                    {
                        <div class="form-group">
                            <label>@prop.Name</label>

                            @if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?))
                            {
                                <input type="number"
                                       value="@prop.GetValue(_ViewModel.CurrentEntity)"
                                       data-testid="@prop.Name"
                                       @onchange="e => prop.SetValue(_ViewModel.CurrentEntity, Convert.ToInt32(e.Value))"/>
                            }
                            else
                            {
                                <input type="text"
                                       value="@prop.GetValue(_ViewModel.CurrentEntity)"
                                       data-testid="@prop.Name"
                                       @onchange="e => prop.SetValue(_ViewModel.CurrentEntity, e.Value?.ToString())"/>
                            }
                        </div>
                    }
                    <button type="submit">Update</button>
                </EditForm>
                <div id="deleteItemdiv" @onclick="@_ViewModel.SubmitDeleteAsync">
                    Delete
                </div>
            }
        </div>
        <div id="adddiv">
            <h4>Add a @Title : </h4>
            <EditForm Model="@_ViewModel._ItemToAdd.CurrentEntity" OnValidSubmit="@_ViewModel.SubmitAddAsync">
                @foreach (var prop in typeof(TItem).GetProperties()
                              .Where(p => !Attribute.IsDefined(p, typeof(IgnoreInTemplateAttribute))))
                {
                    <div class="form-group">
                        <label>@prop.Name</label>

                        @if (prop.PropertyType == typeof(int) || prop.PropertyType == typeof(int?))
                        {
                            <input type="number"
                                   value="@prop.GetValue(_ViewModel._ItemToAdd.CurrentEntity)"
                                   @onchange="e => prop.SetValue(_ViewModel._ItemToAdd.CurrentEntity, Convert.ToInt32(e.Value))"/>
                        }
                        else
                        {
                            <input type="text"
                                   value="@prop.GetValue(_ViewModel._ItemToAdd.CurrentEntity)"
                                   @onchange="e => prop.SetValue(_ViewModel._ItemToAdd.CurrentEntity, e.Value?.ToString())"/>
                        }
                    </div>
                }
                <button type="submit">Add</button>
            </EditForm>
        </div>
    </div>
  
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public BaseEntityViewModel<TItem> _ViewModel { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _ViewModel.IsLoading = true;
        try
        {
            await _ViewModel.LoadAsync();
        }
        catch (Exception ex) { }
    }
}
