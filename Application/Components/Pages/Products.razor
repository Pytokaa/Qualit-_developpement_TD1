@using Application.Models
@using Application.Services
@using Application.ViewModel
@page "/products"
@inject ProductViewModel _ProductViewModel
@inject BaseEntityViewModel<Marque> _BrandViewModel
@inject BaseEntityViewModel<TypeProduit> _ProductTypeViewModel
@inject NavigationManager Navigation


<link href="css/productsTable.css" rel="stylesheet" />
<link href="css/Loader.css" rel="stylesheet" />

<PageTitle>Products</PageTitle>
<h3>Products</h3>

<div id="products-controls">
    <div id="filter-and-search">
        <label for="searchinput">Search for a product:</label>
        <input type="text" id="searchinput" @oninput="@(async e => await _ProductViewModel.OnSearchInputAsync(e.Value?.ToString() ?? ""))"

               value="@_ProductViewModel.SearchName" placeholder="Type product name..." />

        <div id="filters">
            <div>
                <label for="selectbrand">Select Brand:</label>
                <select name="selectbrand" id="selectbrand" @onchange="@(async e => { _ProductViewModel.SearchBrand = e.Value?.ToString(); await _ProductViewModel.ApplyFilterAsync(); })" value="@_ProductViewModel.SearchBrand">
                    <option value="">Select a brand</option>
                    @if (_BrandViewModel.Items != null)
                    {
                        @foreach (var brandName in _BrandViewModel.Items)
                        {
                            <option value="@brandName.NomMarque">@brandName.NomMarque</option>
                        }
                    }
                </select>
            </div>

            <div>
                <label for="selectproductType">Select Product Type:</label>
                <select name="selectproductType" id="selectproductType" @onchange="@(async e => { _ProductViewModel.SearchType = e.Value?.ToString(); await _ProductViewModel.ApplyFilterAsync(); })" value="@_ProductViewModel.SearchType">
                    <option value="">Select a product type</option>
                    @if (_ProductTypeViewModel.Items != null)
                    {
                        @foreach (var producttype in _ProductTypeViewModel.Items)
                        {
                            <option value="@producttype.NomTypeProduit">@producttype.NomTypeProduit</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    <div id="addProduct" @onclick='() => NavigateToPage("/product/create")'>
        <p>Add a product</p>
    </div>
</div>

@if (_ProductViewModel.IsLoading)
{
    <div class="loader"></div>
}
else if (!_ProductViewModel.Items.Any())
{
    <p>There is no product</p>
}
else
{
    <h4>@_ProductViewModel.Items.Count() correspond to your selection : </h4>
    <div id="divProducts">
        @foreach (var product in _ProductViewModel.Items)
        {
            <div class="divProduct div-info-produit" @onclick="() => NavigateToProduct(product.IdProduit)">
                <div class="product-content">
                    <img src="@GetPhoto(product.UriPhoto)" alt="@product.NomPhoto">
                    <h4>@product.NomProduit</h4>
                    <h5>Brand : @product.NomMarque</h5>
                    <h5>Product type : @product.NomTypeProduit</h5>
                </div>
                @if (product.StockReel < product.StockMin)
                {
                    <div class="ribbon">Out of stock</div>
                }
            </div>
        }
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        _ProductViewModel.OnChange += StateHasChanged;
        _ProductViewModel.IsLoading = true;
        try
        {
            await _ProductViewModel.LoadAsync();
            await _BrandViewModel.LoadAsync();
            await _ProductTypeViewModel.LoadAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            _ProductViewModel.IsLoading = false;
        }
    }
    private void NavigateToPage(string uri) => Navigation.NavigateTo(uri);
    private void NavigateToProduct(int id) => Navigation.NavigateTo($"/product/{id}");
    private string GetPhoto(string? uri) => string.IsNullOrWhiteSpace(uri)
        ? "_content/YourApp/images/empty-square.png"
        : uri;
}