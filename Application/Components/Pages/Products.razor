@using Application.Models
@using Application.Services
@using Application.ViewModel
@page "/products"
@inject ProductViewModel _ProductViewModel
@inject ProductWSService _ProductWsService
@inject BrandWSService _BrandWsService
@inject ProductTypeWSService _ProductTypeWsService


<link href="css/productsTable.css" rel="stylesheet" />
<link href="css/Loader.css" rel="stylesheet" />

<PageTitle>Products</PageTitle>
<h3>Products</h3>

<div id="products-controls">
    <div id="filter-and-search">
        <label for="searchinput">Search for a product:</label>
        <input type="text" id="searchinput" @oninput="OnSearchInput" @bind="searchTerm" placeholder="Type product name..." />

        <div id="filters">
            <div>
                <label for="selectbrand">Select Brand:</label>
                <select name="selectbrand" id="selectbrand" @onchange="OnBrandChange" value="@selectedBrand">
                    <option value="">Select a brand</option>
                    @if (brands != null)
                    {
                        @foreach (var brandName in brands)
                        {
                            <option value="@brandName.NomMarque">@brandName.NomMarque</option>
                        }
                    }
                </select>
            </div>

            <div>
                <label for="selectproductType">Select Product Type:</label>
                <select name="selectproductType" id="selectproductType" @onchange="OnProductTypeChange" value="@selectedProductType">
                    <option value="">Select a product type</option>
                    @if (productTypes != null)
                    {
                        @foreach (var producttype in productTypes)
                        {
                            <option value="@producttype.NomTypeProduit">@producttype.NomTypeProduit</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    <div id="addProduct" @onclick='() => NavigateToPage("/product/create")'>
        <p>Add a product</p>
    </div>
</div>

@if (_ProductViewModel.IsLoading)
{
    <div class="loader"></div>
}
else if (!_ProductViewModel.products.Any())
{
    <p>There is no product</p>
}
else
{
    <h4>@_ProductViewModel.products.Count() correspond to your selection : </h4>
    <div id="divProducts">
        @foreach (var product in _ProductViewModel.products)
        {
            <div class="divProduct div-info-produit" @onclick="() => NavigateToProduct(product.IdProduit)">
                <div class="product-content">
                    <img src="@GetPhoto(product.UriPhoto)" alt="@product.NomPhoto">
                    <h4>@product.NomProduit</h4>
                    <h5>Brand : @product.NomMarque</h5>
                    <h5>Product type : @product.NomTypeProduit</h5>
                </div>
                @if (product.StockReel < product.StockMin)
                {
                    <div class="ribbon">Out of stock</div>
                }
            </div>
        }
    </div>
}

@code {
    private List<Marque>? brands;
    private List<TypeProduit> productTypes;
    private string selectedBrand = "";
    private string selectedProductType = "";
    private string searchTerm = "";
    private CancellationTokenSource? searchCts;

    [Inject] NavigationManager Navigation { get; set; }

    private async Task OnBrandChange(ChangeEventArgs e)
    {
        selectedBrand = e.Value?.ToString() ?? "";
        await ApplyFilters();
    }

    private async Task OnProductTypeChange(ChangeEventArgs e)
    {
        selectedProductType = e.Value?.ToString() ?? "";
        await ApplyFilters();
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        searchCts?.Cancel();
        searchCts = new CancellationTokenSource();
        var token = searchCts.Token;

        try
        {
            await Task.Delay(500, token);
            await ApplyFilters();
        }
        catch (TaskCanceledException) { }

        StateHasChanged();
    }

    private async Task ApplyFilters()
    {
        string? name = string.IsNullOrEmpty(searchTerm) ? null : searchTerm;
        string? brand = string.IsNullOrEmpty(selectedBrand) ? null : selectedBrand;
        string? productType = string.IsNullOrEmpty(selectedProductType) ? null : selectedProductType;

        //products = await _ProductWsService.GetProductByFilter(name, brand, productType) ?? new List<Product>();
    }

    protected override async Task OnInitializedAsync()
    {
        _ProductViewModel.IsLoading = true;
        try
        {
            await _ProductViewModel.LoadProductAsync();
        }
        catch (Exception ex)
        {
            _ProductViewModel.ErrorMessage = ex.Message;
        }
        finally
        {
            _ProductViewModel.IsLoading = false;
        }
        brands = await _BrandWsService.GetAllAsync() ?? new List<Marque>();
        productTypes = await _ProductTypeWsService.GetAllAsync() ?? new List<TypeProduit>();
    }

    private void NavigateToPage(string uri)
    {
        Navigation.NavigateTo(uri);
    }

    private void NavigateToProduct(int id)
    {
        Navigation.NavigateTo($"/product/{id}");
    }

    private string GetPhoto(string? uri)
    {
        return string.IsNullOrWhiteSpace(uri)
            ? "_content/YourApp/images/empty-square.png"
            : uri;
    }
}