@using Application.Models
@using Application.Services
@page "/products"
@inject ProductWSService _ProductWsService
@inject BrandWSService _BrandWsService
@inject ProductTypeWSService _ProductTypeWsService

<link href="css/productsTable.css" rel="stylesheet" />
<link href="css/Loader.css" rel="stylesheet" />



<PageTitle>Products</PageTitle>
<h3>Products</h3>

<div id="products-controls">
    <div id="filter-and-search">
        <label for="searchinput">Search for a product:</label>
        <input type="text" id="searchinput" @oninput="OnSearchInput" value="@searchTerm" placeholder="Type product name..." />


        <div id="filters">
            <label for="selectbrand">Select Brand:</label>
            <select name="selectbrand" id="selectbrand" @onchange="OnBrandChange">
                <option value="">Select a brand</option>
                @if (brands != null)
                {
                    @foreach (var brandName in brands)
                    {
                        <option value="@brandName.NomMarque">@brandName.NomMarque</option>
                    }
                }
            </select>

            <label for="selectproductType">Select Product Type:</label>
            <select name="selectproductType" id="selectproductType" @onchange="OnProductTypeChange">
                <option value="">Select a product type</option>
                @if (productTypes != null)
                {
                    @foreach (var producttype in productTypes)
                    {
                        <option value="@producttype.NomTypeProduit">@producttype.NomTypeProduit</option>
                    }
                }
            </select>
        </div>
    </div>

    <div id="addProduct" @onclick='() => NavigateToPage("/product/create")'>
        <p>Add a product</p>
    </div>
</div>



@if (products == null)
{
    <div class="loader"></div>

}
else if (!products.Any())
{
    <p>There is no product</p>
}
else
{
    <h4>@products.Count correspond to your selection : </h4>
    <div id="divProducts">
        @foreach (var product in products)
        {
            <div class="divProduct" @onclick="() => NavigateToProduct(product.IdProduit)">
                <div class="product-content">
                    <img src="@GetPhoto(product.UriPhoto)" alt="@product.NomPhoto">
                    <h4>@product.NomProduit</h4>
                    <h5>Brand : @product.NomMarque</h5>
                    <h5>Product type : @product.NomTypeProduit</h5>
                </div>
                @if (product.StockReel < product.StockMin)
                {
                    <div class="ribbon">Out of stock</div>
                }
            </div>

        }
    </div>
}

@code {
    private List<Product>? products;
    private List<Marque>? brands;
    private List<TypeProduit> productTypes;
    private string selectedBrand;
    private string selectedProductType;
    private string searchTerm = "";
    private CancellationTokenSource? searchCts;

    [Inject] NavigationManager Navigation { get; set; }

    private async Task OnBrandChange(ChangeEventArgs e)
    {
        selectedBrand = e.Value?.ToString();
        if (selectedBrand != "")
        {
            products = await _ProductWsService.GetProductByBrandName(selectedBrand);
        }
        else
        {
            products = await _ProductWsService.GetAllAsync() ?? new List<Product>();
        }
    }

    private async Task OnProductTypeChange(ChangeEventArgs e)
    {
        selectedProductType = e.Value?.ToString();
        if (selectedProductType != "")
        {   
            products = await _ProductWsService.GetProductByType(selectedProductType);
        }
        else
        {
            products = await _ProductWsService.GetAllAsync() ?? new List<Product>();
        }
    }
    
    
    
    protected override async Task OnInitializedAsync()
    {
        products = await _ProductWsService.GetAllAsync() ?? new List<Product>();
        foreach (var product in products)
        {
            Console.WriteLine(product.NomProduit + " " + product.StockMin + " " + product.StockReel + " " + (product.StockReel < product.StockMin));
        }
        brands = await _BrandWsService.GetAllAsync() ?? new List<Marque>();
        productTypes = await _ProductTypeWsService.GetAllAsync() ?? new List<TypeProduit>();
    }

    private void NavigateToPage(string uri)
    {
        Navigation.NavigateTo(uri);
    }

    private void NavigateToProduct(int id)
    {
        Navigation.NavigateTo($"/product/{id}");
    }

    private string GetPhoto(string? uri)
    {
        return string.IsNullOrWhiteSpace(uri)
            ? "_content/YourApp/images/empty-square.png"
            : uri;
    }
    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        searchCts?.Cancel();
        searchCts = new CancellationTokenSource();
        var token = searchCts.Token;

        try
        {
            await Task.Delay(500, token);
            if (searchTerm != "")
            {
                
                products = await _ProductWsService.GetProductListByName(searchTerm) ?? new List<Product>();
            }
            else
            {
                products = await _ProductWsService.GetAllAsync() ?? new List<Product>();
            }
            
        }
        catch (TaskCanceledException) { }

        StateHasChanged(); 
    }
}