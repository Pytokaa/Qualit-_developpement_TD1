@using System.Text.Json
@using Application.Attributes
@using Application.Models
@using Application.Models.StateService
@using Application.Services
@page "/product/create"
@inject ProductWSService _ProductWsService
@inject BrandWSService _BrandWsService
@inject ProductTypeWSService _ProductTypeWsService
@inject IStateService<Product> ProductState
@inject NavigationManager NavManager


<link href="css/productCreate.css" rel="stylesheet" />


<PageTitle>Product Create</PageTitle>

<h3>Create a product</h3>



@if (_brands.Count == 0 || _productTypes.Count == 0)
{
    <p>Loading...</p>
}
else
{
    /*<form @onsubmit="SaveProduct">
        <input type="text" @bind="ProductState.CurrentEntity.NomProduit" placeholder="Product name" />

        
        
        
        <select @bind="ProductState.CurrentEntity.IdMarque">
            <option value="">-- Select brand --</option>
            @foreach (var brand in _brands)
            {
                <option value="@brand.IdMarque">@brand.NomMarque</option>
            }
        </select>

        <select @bind="ProductState.CurrentEntity.IdTypeProduit">
            <option value="">-- Select product type --</option>
            @foreach (var type in _productTypes)
            {
                <option value="@type.IdTypeProduit">@type.NomTypeProduit</option>
            }
        </select>

        <textarea @bind="ProductState.CurrentEntity.Description" placeholder="Description"></textarea>

        <input type="text" @bind="ProductState.CurrentEntity.NomPhoto" placeholder="Photo name" />
        <input type="text" @bind="ProductState.CurrentEntity.UriPhoto" placeholder="Photo URI" />
        @if (!string.IsNullOrWhiteSpace(ProductState.CurrentEntity.UriPhoto))
        {
            <div style="margin-top:1rem;">
                <p>Preview:</p>
                <img src="@ProductState.CurrentEntity.UriPhoto" alt="Preview" style="max-width:200px; max-height:200px; object-fit:cover; border:1px solid #ccc;" />
            </div>
        }

        <button type="submit">Save</button>
    </form>*/
    
    <EditForm Model="ProductState.CurrentEntity" OnValidSubmit="SaveProduct">
        @foreach (var product in typeof(Product).GetProperties().Where(p => !Attribute.IsDefined(p, typeof(IgnoreInTemplateAttribute))))
        {
            <div>
                <label>@product.Name</label>
                            
                @if (product.PropertyType == typeof(int) || product.PropertyType == typeof(int?))
                {
                    <input type="number"
                           value="@product.GetValue(ProductState.CurrentEntity)"
                           @onchange="e => product.SetValue(ProductState.CurrentEntity, Convert.ToInt32(e.Value))" />
                }
                else
                {
                    <input type="text"
                           value="@product.GetValue(ProductState.CurrentEntity)"
                           @onchange="e => product.SetValue(ProductState.CurrentEntity, e.Value?.ToString())" />
                }
            </div>
            
        }
        <select @bind="ProductState.CurrentEntity.IdMarque">
            <option value="">-- Select brand --</option>
            @foreach (var brand in _brands)
            {
                <option value="@brand.IdMarque">@brand.NomMarque</option>
            }
        </select>

        <select @bind="ProductState.CurrentEntity.IdTypeProduit">
            <option value="">-- Select product type --</option>
            @foreach (var type in _productTypes)
            {
                <option value="@type.IdTypeProduit">@type.NomTypeProduit</option>
            }
        </select>
        <button type="submit">Add</button>
    </EditForm>

}

@code{
    private List<Marque>? _brands = new();
    private List<TypeProduit>? _productTypes = new();
    private IBrowserFile selectedFile;
    protected override async Task OnInitializedAsync()
    {
        _brands = await _BrandWsService.GetAllAsync() ?? new List<Marque>();
        _productTypes = await _ProductTypeWsService.GetAllAsync() ?? new List<TypeProduit>();
        if (ProductState.CurrentEntity == null)
        {
            ProductState.CurrentEntity = new Product();
        }
    }
    private async Task SaveProduct()
    {
        try
        {
            var response = await _ProductWsService.AddAsync(ProductState.CurrentEntity);
            if (response != null)
            {
                ProductState.CurrentEntity = new Product();
                NavManager.NavigateTo("/products");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }
    /*
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var folderPath = Path.Combine(Environment.CurrentDirectory, "images");
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
            var filePath = Path.Combine(folderPath, uniqueFileName);

            using var stream = File.Create(filePath);
            await file.OpenReadStream().CopyToAsync(stream);

            ProductState.CurrentEntity.UriPhoto = $"images/{uniqueFileName}";
            ProductState.CurrentEntity.NomPhoto = file.Name;
            
            Console.WriteLine(File.Exists(filePath));

            StateHasChanged();
        }
    }*/
}